{"mappings":"oeAAAA,EAAA,SAEgB,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAaC,KAAKC,SAAW,GACnCC,YAAW,KACLH,GACFF,EAAQ,4BAEFC,EAAD,0BAAC,GACP,IAAK,IAEFK,MACNC,IACEC,QAAQC,IAAIF,EAAO,IAErBG,IACEF,QAAQC,IAAIC,EAAM","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst promise = new Promise((resolve, reject) => {\n  const canFulfill = Math.random() > 0.5;\n  setTimeout(() => {\n    if (canFulfill) {\n      resolve(`it's fulfilled(выполнен)`);\n    }\n    reject(`it's rejected(отклонен)`);\n  }, 5000);\n});\npromise.then(\n  result => {\n    console.log(result);\n  },\n  error => {\n    console.log(error);\n  }\n);\n// const formEl = document.querySelector('.form');\n\n// formEl.addEventListener('submit', onFormSubmit);\n\n// function onFormSubmit(e) {\n//   e.preventDefault();\n//   let delay = Number(formEl.elements.delay.value);\n//   const step = Number(formEl.elements.step.value);\n//   const amount = Number(formEl.elements.amount.value);\n//   for (let i = 0; i < amount; i++) {\n//     createPromise(i + 1, delay)\n//       .then(({ position, delay }) =>\n//         Notiflix.Notify.success(\n//           `✅ Fulfilled promise ${position} in ${delay}ms`,\n//           {\n//             position: 'center-top',\n//           }\n//         )\n//       )\n//       .catch(({ position, delay }) =>\n//         Notiflix.Notify.failure(\n//           `❌ Rejected promise ${position} in ${delay}ms`,\n//           {\n//             position: 'center-top',\n//           }\n//         )\n//       );\n//     delay += step;\n//   }\n// }\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n// ==========================start=============================================================\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n"],"names":["parcelRequire","Promise","resolve","reject","canFulfill","Math","random","setTimeout","then","result","console","log","error"],"version":3,"file":"03-promises.312709b6.js.map"}